\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{1}{section.1}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Photo stills of the original device in action. When you tilt the device to the left as in a), the LEDs to the right light up. As you tilt the device more to the right, the lit LED moves from right to left as in b) and c). When level, the blue center LED lights up.}}{1}{figure.1}}
\@writefile{lof}{\contentsline {subfigure}{\numberline{(a)}{\ignorespaces {}}}{1}{figure.1}}
\@writefile{lof}{\contentsline {subfigure}{\numberline{(b)}{\ignorespaces {}}}{1}{figure.1}}
\@writefile{lof}{\contentsline {subfigure}{\numberline{(c)}{\ignorespaces {}}}{1}{figure.1}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Overview}{2}{section.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Block diagram of the FSM and how it forms the bubble-level system. The level FSM talks to the I2C core, which communicates to the MPU via a set of buffered GPIO blocks on the FPGA. A reset button resets all FSMs to their initial state. The design runs is compiled for a 50MHz clock constraint. The output to outside of the FPGA is buffered through the GPIO logic blocks, which was the reason I used IP specific to the FPGA. I only did the layout and verification for the level\_fsm.sv file from the original project.}}{2}{figure.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Ports}{2}{subsection.2.1}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Standard Library Layout}{3}{section.3}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces The level\_fsm.sv file was synthesized and laid out using the 45nm standard cell library provided. The ports were aligned as such: inputs on the left, outputs on the right, and power on the bottom. The very outer dimensions are 33um x 28um, for a total area of 924um\^2.}}{3}{figure.3}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Simulation/Verification}{4}{section.4}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces The Verilog file was also translated to a RTL layout and displayed in viewable form. Here we see the entire FSM schematic in terms of logic gates.}}{4}{figure.4}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces The previous RTL design was transformed into a new cell view. This cell view was placed in a test-bench schematic. Each output of the FSM was loaded with a 10fF capacitor. An array of 1V supplies was used to drive the input signals.}}{5}{figure.5}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces Here is a closeup of the test-bench schematic. The voltage input signals were set up manually using an array of input voltage levels that corresponded to the input vectors used in the original Verilog test bench.}}{6}{figure.6}}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces The simulation was set up using ADE. The simulation duration was the same length as the original Verilog test bench file.}}{7}{figure.7}}
\@writefile{lof}{\contentsline {figure}{\numberline {8}{\ignorespaces For comparison, here is the input and output vector of the original Verilog simulation. This simulation tests does the following in this order: 1) FSM reset 2) Write to accelerometer to wake it up 3) Wait for valid response 4) Read from accelerometer register 5) Display level on LEDs. 6) Read from accelerometer register, but this time receive an error 7) Verify error\_led output 8) Reset FSM 9) Write to accelerometer to wake it up, but this time receive an error 10) Verify error\_led output 11) Stall forever. This procedure tests an overwhelming majority of the FSM. Signals have been color-coded for your convenience.}}{8}{figure.8}}
\@writefile{lof}{\contentsline {figure}{\numberline {9}{\ignorespaces Here is the same test bench but now it is executed in Virtuoso. As we can see the waveforms are the same, but we see characteristic RC delays.}}{8}{figure.9}}
\@writefile{lof}{\contentsline {figure}{\numberline {10}{\ignorespaces Blah blah blah}}{9}{figure.10}}
\@writefile{lof}{\contentsline {figure}{\numberline {11}{\ignorespaces Blah blah blah}}{9}{figure.11}}
\@writefile{lof}{\contentsline {figure}{\numberline {12}{\ignorespaces Blah blah blah}}{10}{figure.12}}
\@writefile{lof}{\contentsline {figure}{\numberline {13}{\ignorespaces Blah blah blah}}{11}{figure.13}}
\@writefile{toc}{\contentsline {section}{\numberline {5}Written Questions}{13}{section.5}}
